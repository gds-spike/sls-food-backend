service: sls-food-backend
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: prod
  region: ap-southeast-1
  memorySize: 512
  timeout: 120
  endpointType: regional
  environment:
    FOOD_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iam:
    role:
      statements: # permissions for all of your functions can be set here
        - Effect: Allow
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:ap-southeast-1:*:*'
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource: 'arn:aws:s3:::*'
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:DeleteObject'
          Resource: 'arn:aws:s3:::food-security-csv/*'

resources:
  Resources:
    FoodTable:
      Type: AWS::DynamoDB::Table
      # DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.FOOD_TABLE}
        AttributeDefinitions:
          - AttributeName: PostalUnit
            AttributeType: S
          - AttributeName: Postal
            AttributeType: S
          - AttributeName: Programme
            AttributeType: S
          - AttributeName: Location
            AttributeType: S
        KeySchema:
          - AttributeName: PostalUnit
            KeyType: HASH
          - AttributeName: Postal
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ProgrammeIndex
            KeySchema:
              - AttributeName: PostalUnit
                KeyType: HASH
              - AttributeName: Programme
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        GlobalSecondaryIndexes:
          - IndexName: ProgrammeGlobalIndex
            KeySchema:
              - AttributeName: Programme
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: LocationGlobalIndex
            KeySchema:
              - AttributeName: Location
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
# you can add statements to the Lambda function's IAM Role here

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  foodCsvProcess:
    handler: foodCsvProcess.handler
    events:
      - s3:
          bucket: food-security-csv
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .csv

  transformXlsxToCsv:
    handler: utils/transformXlsxToCsv.handler
    timeout: 120
    events:
      - s3:
          bucket: food-security-csv
          event: s3:ObjectCreated:*
          rules:
            - prefix: raw/
            - suffix: .xlsx
          existing: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
